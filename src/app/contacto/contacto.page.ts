import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonContent, IonHeader, IonTitle, IonToolbar, IonCard, IonCardHeader, IonCardTitle, IonCardContent, IonButton, IonList, IonItem, IonLabel, IonBadge, IonIcon } from '@ionic/angular/standalone';
import { Geolocation } from '@capacitor/geolocation';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { addIcons } from 'ionicons';
import { location, locationOutline, callOutline, mailOutline, trash } from 'ionicons/icons';

@Component({
  selector: 'app-contacto',
  templateUrl: './contacto.page.html',
  styleUrls: ['./contacto.page.scss'],
  standalone: true,
  imports: [
    CommonModule,
    IonContent,
    IonHeader,
    IonTitle,
    IonToolbar,
    IonCard,
    IonCardHeader,
    IonCardTitle,
    IonCardContent,
    IonList,
    IonItem,
    IonLabel,
    IonBadge,
    IonButton,
    IonIcon,
  ]
})
export class ContactoPage {
  latitud: number | null = null;
  longitud: number | null = null;
  mapaUrl: SafeResourceUrl | null = null;
  estadoGPS: string = 'Listo para obtener ubicaci√≥n';

  constructor() {
    addIcons({location,trash,locationOutline,callOutline,mailOutline});
  }

  ultimasConsultas = [
    { nombre: 'Dra. Ana P√©rez', especialidad: 'Cardiolog√≠a', fecha: '2024-05-20', hora: '10:00' },
    { nombre: 'Dr. Luis G√≥mez', especialidad: 'Dermatolog√≠a', fecha: '2024-04-15', hora: '15:30' },
    { nombre: 'Dra. Marta Ruiz', especialidad: 'Pediatr√≠a', fecha: '2024-03-10', hora: '09:00' },
    { nombre: 'Dr. Juan Torres', especialidad: 'Neurolog√≠a', fecha: '2024-02-28', hora: '12:00' },
    { nombre: 'Dra. Paula D√≠az', especialidad: 'Ginecolog√≠a', fecha: '2024-01-18', hora: '11:15' },
    { nombre: 'Dr. Carlos M√©ndez', especialidad: 'Oftalmolog√≠a', fecha: '2023-12-05', hora: '16:45' }
  ];

  proximasConsultas = [
    { nombre: 'Dra. Laura S√°nchez', especialidad: 'Endocrinolog√≠a', fecha: '2025-06-10', hora: '08:30', estado: 'pendiente' },
    { nombre: 'Dr. Mario Vargas', especialidad: 'Traumatolog√≠a', fecha: '2025-06-15', hora: '14:00', estado: 'pendiente' },
    { nombre: 'Dra. Silvia Romero', especialidad: 'Reumatolog√≠a', fecha: '2025-06-20', hora: '10:45', estado: 'pendiente' },
    { nombre: 'Dr. Andr√©s L√≥pez', especialidad: 'Psiquiatr√≠a', fecha: '2025-06-25', hora: '13:30', estado: 'pendiente' },
    { nombre: 'Dra. Patricia Le√≥n', especialidad: 'Otorrinolaringolog√≠a', fecha: '2025-07-01', hora: '09:15', estado: 'pendiente' },
    { nombre: 'Dr. Ernesto Gil', especialidad: 'Urolog√≠a', fecha: '2025-07-05', hora: '15:00', estado: 'pendiente' }
  ];

  private sanitizer = inject(DomSanitizer);

  // M√©todos para cambiar estado
  confirmarCita(consulta: any) {
    consulta.estado = 'confirmada';
  }
  cancelarCita(consulta: any) {
    consulta.estado = 'cancelada';
  }

  // Geolocalizaci√≥n y mapa seguro
  async obtenerUbicacion() {
    this.estadoGPS = 'Verificando permisos...';
    
    try {
      console.log('üîç Iniciando proceso de geolocalizaci√≥n...');
      
      // Verificar permisos actuales
      console.log('üìã Verificando permisos actuales...');
      const permissions = await Geolocation.checkPermissions();
      console.log('üìç Estado actual de permisos:', permissions);
      
      if (permissions.location !== 'granted') {
        console.log('‚ùå Permisos no concedidos, solicitando...');
        this.estadoGPS = 'Solicitando permisos...';
        
        const requestResult = await Geolocation.requestPermissions();
        console.log('üìã Resultado de solicitud de permisos:', requestResult);
        
        if (requestResult.location !== 'granted') {
          this.estadoGPS = 'Permisos denegados';
          alert('‚ùå PERMISOS DENEGADOS\n\nPara usar el GPS:\n1. Ve a Configuraci√≥n ‚Üí Aplicaciones\n2. Busca "MiaplicacionSalud"\n3. Activa permisos de ubicaci√≥n\n4. Vuelve a intentar');
          return;
        }
      }
      
      console.log('‚úÖ Permisos concedidos, obteniendo ubicaci√≥n...');
      this.estadoGPS = 'Obteniendo ubicaci√≥n GPS...';
      
      // Configuraci√≥n robusta para obtener ubicaci√≥n
      const options = {
        enableHighAccuracy: true,  // Usar GPS de alta precisi√≥n
        timeout: 20000,           // 20 segundos timeout
        maximumAge: 0             // No usar cach√©, obtener ubicaci√≥n fresca
      };
      
      console.log('üåç Configuraci√≥n GPS:', options);
      
      const position = await Geolocation.getCurrentPosition(options);
      
      this.latitud = Number(position.coords.latitude.toFixed(6));
      this.longitud = Number(position.coords.longitude.toFixed(6));
      
      console.log('ÔøΩ ¬°Ubicaci√≥n obtenida exitosamente!');
      console.log(`üìç Coordenadas: ${this.latitud}, ${this.longitud}`);
      console.log(`üìè Precisi√≥n: ${position.coords.accuracy} metros`);
      
      this.estadoGPS = `Ubicaci√≥n obtenida (¬±${Math.round(position.coords.accuracy)}m)`;
      
      // Crear URL del mapa
      const url = `https://maps.google.com/maps?q=${this.latitud},${this.longitud}&z=16&output=embed`;
      this.mapaUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
      
      // Mostrar resultado exitoso
      alert(`‚úÖ ¬°UBICACI√ìN OBTENIDA!\n\nüìç Coordenadas:\nLatitud: ${this.latitud}\nLongitud: ${this.longitud}\n\nüìè Precisi√≥n: ¬±${Math.round(position.coords.accuracy)} metros`);
      
    } catch (error: any) {
      console.error('‚ùå Error detallado al obtener ubicaci√≥n:', error);
      
      let errorMessage = '‚ùå Error desconocido';
      let troubleshooting = '';
      
      if (error.message) {
        console.log('üîç Mensaje de error:', error.message);
        
        if (error.message.includes('permission') || error.message.includes('denied')) {
          errorMessage = 'üö´ Permisos de ubicaci√≥n denegados';
          troubleshooting = '\n\nüîß Soluci√≥n:\n‚Ä¢ Ve a Configuraci√≥n del dispositivo\n‚Ä¢ Busca la app MiaplicacionSalud\n‚Ä¢ Activa permisos de ubicaci√≥n';
          this.estadoGPS = 'Error: Permisos denegados';
          
        } else if (error.message.includes('timeout') || error.message.includes('TIMEOUT')) {
          errorMessage = '‚è±Ô∏è Tiempo de espera agotado';
          troubleshooting = '\n\nüîß Soluci√≥n:\n‚Ä¢ Aseg√∫rate de estar al aire libre\n‚Ä¢ Verifica que el GPS est√© activado\n‚Ä¢ Reinicia la aplicaci√≥n';
          this.estadoGPS = 'Error: Timeout GPS';
          
        } else if (error.message.includes('unavailable') || error.message.includes('UNAVAILABLE')) {
          errorMessage = 'üì° Servicios de ubicaci√≥n no disponibles';
          troubleshooting = '\n\nüîß Soluci√≥n:\n‚Ä¢ Activa el GPS en Configuraci√≥n\n‚Ä¢ Verifica conectividad\n‚Ä¢ Reinicia el dispositivo';
          this.estadoGPS = 'Error: GPS no disponible';
          
        } else if (error.message.includes('POSITION_UNAVAILABLE')) {
          errorMessage = 'üõ∞Ô∏è No se puede determinar la posici√≥n';
          troubleshooting = '\n\nüîß Soluci√≥n:\n‚Ä¢ Sal al exterior para mejor se√±al\n‚Ä¢ Espera unos minutos\n‚Ä¢ Reinicia GPS en configuraci√≥n';
          this.estadoGPS = 'Error: Posici√≥n no disponible';
          
        } else {
          errorMessage = `üêõ Error t√©cnico: ${error.message}`;
          this.estadoGPS = 'Error t√©cnico';
        }
      }
      
      alert(`${errorMessage}${troubleshooting}\n\nüîç Para m√°s informaci√≥n, revisa la consola del desarrollador.`);
    }
  }

  // M√©todo para limpiar datos
  limpiarUbicacion() {
    this.latitud = null;
    this.longitud = null;
    this.mapaUrl = null;
    this.estadoGPS = 'Ubicaci√≥n limpiada';
    console.log('üßπ Datos de ubicaci√≥n limpiados');
  }
}